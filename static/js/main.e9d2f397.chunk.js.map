{"version":3,"sources":["constants/ChessIconUnicode.ts","components/BoardSquare.tsx","chess-rules/pieces/Piece.ts","chess-rules/board/Board.ts","chess-rules/pieces/Move.ts","chess-rules/pieces/PieceWithRepeatedMove.ts","chess-rules/pieces/Tower.ts","chess-rules/pieces/Knight.ts","chess-rules/pieces/Bishop.ts","chess-rules/pieces/King.ts","chess-rules/pieces/Queen.ts","chess-rules/pieces/Pawn.ts","shared/nullThrows.ts","components/GameBoard.tsx","Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ChessIconUnicode","BoardSquare","color","icon","size","onClick","className","css","styles","whiteSquareContainer","blackSquareContainer","rootContainer","dangerouslySetInnerHTML","__html","mediumIcon","largeIcon","baseIcon","PIECE_TEAM","display","justifyContent","alignItems","backgroundColor","border","width","height","fontSize","cursor","GAME_MODE","BOARD_ELEMENT_NAME","Piece","team","board","initialPosition","this","Move","startPosition","endPosition","PieceWithRepeatedMove","currentPosition","stepOnRows","stepOnColumns","availableMoves","getBoard","candidatePosition","row","column","isPositionWithinTheTable","move","hasTeamFriend","getTeam","hasTeamEnemy","push","Tower","TOWER","getMovesWithStep","Knight","KNIGHT","getValidMove","targetPosition","validMoves","Error","Bishop","BISHOP","King","KING","isPositionEmpty","Queen","QUEEN","Pawn","PAWN","pawnStep","WHITE","isEqual","getInitialPosition","nullThrows","obj","Board","mode","boardTable","whiteTeam","blackTeam","recordedMoves","activePiece","Map","createGame","position","tableRows","length","tableColumns","isRowValid","isColumnValid","getBoardElement","name","EMPTY","boardElement","getName","DEFAULT","createDefaultGame","CUSTOM","boardDimensions","rows","col","columns","pieces","addPiecesToBoard","piece","assignTeams","findIndex","getEndPosition","isAvailableMove","getPieceTeam","makeMove","get","setAvailableMoves","filterMovesThatExposeTheKing","getAvailableMoves","moves","friendKing","Array","from","keys","find","filter","kingPosition","isKingInThreat","isPositionInThreat","revertLastMove","oppositeTeam","piecePosition","opposite","isRockMove","makeRockMove","getStartPosition","currentElementOnEnd","pieceTeam","set","delete","endPositionOldElement","Math","abs","king","kingStartPosition","kingEndPosition","towerStartPosition","towerEndPosition","tower","lastMove","pop","revertRockMove","movedPiece","assignTeam","initBoardTable","BLACK","GameBoard","dimensions","useState","hasChanges","setHasChanges","boardRules","setBoardRules","useEffect","squaresTypes","Squares","elementName","getElementName","BULLET","enumMember","getIcon","key","executeBoardAction","rowRootContainer","boardRootContainer","renderBoard","margin","Home","props","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e9d2f397.chunk.js","sourcesContent":["export enum ChessIconUnicode {\n  WHITE_KING = '&#9812;',\n  WHITE_QUEEN = '&#9813;',\n  WHITE_TOWER = '&#9814;',\n  WHITE_BISHOP = '&#9815;',\n  WHITE_KNIGHT = '&#9816;',\n  WHITE_PAWN = '&#9817;',\n  BLACK_KING = '&#9818;',\n  BLACK_QUEEN = '&#9819;',\n  BLACK_TOWER = '&#9820;',\n  BLACK_BISHOP = '&#9821;',\n  BLACK_KNIGHT = '&#9822;',\n  BLACK_PAWN = '&#9823;',\n  BULLET = '&#8226;',\n}\n\nexport type ChessIconUnicodeKeys = keyof typeof ChessIconUnicode;\n","import * as React from 'react';\nimport { createStyles } from '../shared/utils';\nimport { css } from 'emotion';\nimport { ChessIconUnicode } from '../constants/ChessIconUnicode';\n\nexport type BoardSquareProps = Readonly<{\n  color: 'white' | 'black';\n  icon?: ChessIconUnicode | null | undefined;\n  size?: 'medium' | 'large';\n  onClick: () => void;\n}>;\n\nexport function BoardSquare({\n  color,\n  icon,\n  size = 'medium',\n  onClick,\n}: BoardSquareProps) {\n  return (\n    <div\n      className={css(\n        color === 'white'\n          ? styles.whiteSquareContainer\n          : styles.blackSquareContainer,\n        styles.rootContainer\n      )}\n      onClick={onClick}\n    >\n      {icon && (\n        <span\n          dangerouslySetInnerHTML={{ __html: icon }}\n          className={css(\n            size === 'medium' ? styles.mediumIcon : styles.largeIcon,\n            styles.baseIcon\n          )}\n        />\n      )}\n    </div>\n  );\n}\n\nconst SQUARE_SIZE = 50;\nconst styles = createStyles({\n  rootContainer: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  whiteSquareContainer: {\n    backgroundColor: 'white',\n    border: '1px solid white',\n    width: SQUARE_SIZE,\n    height: SQUARE_SIZE,\n  },\n  blackSquareContainer: {\n    backgroundColor: 'gray',\n    border: '1px solid white',\n    width: SQUARE_SIZE,\n    height: SQUARE_SIZE,\n  },\n  mediumIcon: {\n    fontSize: '32px',\n  },\n  largeIcon: {\n    fontSize: '48px',\n  },\n  baseIcon: {\n    cursor: 'pointer',\n  },\n});\n","import { Board, BOARD_ELEMENT_NAME } from '../board/Board';\nimport { Move, Position } from './Move';\n\nexport enum PIECE_TEAM {\n  WHITE = 'WHITE',\n  BLACK = 'BLACK',\n}\n\nexport abstract class Piece {\n  private team: PIECE_TEAM;\n  private board: Board;\n  private initialPosition: Position;\n\n  constructor(team: PIECE_TEAM, board: Board, initialPosition: Position) {\n    this.team = team;\n    this.board = board;\n    this.initialPosition = initialPosition;\n  }\n\n  public abstract getName(): BOARD_ELEMENT_NAME;\n\n  public getTeam(): PIECE_TEAM {\n    return this.team;\n  }\n\n  public getBoard(): Board {\n    return this.board;\n  }\n\n  public getInitialPosition(): Position {\n    return this.initialPosition;\n  }\n\n  public abstract getAvailableMoves(currentPosition: Position): Array<Move>;\n}\n","import { Piece, PIECE_TEAM } from '../pieces/Piece';\nimport { Tower } from '../pieces/Tower';\nimport { Knight } from '../pieces/Knight';\nimport { Bishop } from '../pieces/Bishop';\nimport { King } from '../pieces/King';\nimport { Queen } from '../pieces/Queen';\nimport { Pawn } from '../pieces/Pawn';\nimport { Position, Move } from '../pieces/Move';\nimport { nullThrows } from '../../shared/nullThrows';\nimport { isEqual, filter } from 'lodash';\n\nexport enum GAME_MODE {\n  DEFAULT = 'DEFAULT',\n  CUSTOM = 'CUSTOM',\n}\n\nexport enum BOARD_ELEMENT_NAME {\n  EMPTY = 'EMPTY',\n  PAWN = 'PAWN',\n  BISHOP = 'BISHOP',\n  KNIGHT = 'KNIGHT',\n  KING = 'KING',\n  QUEEN = 'QUEEN',\n  TOWER = 'TOWER',\n}\n\ntype BoardElement = Piece | null | undefined;\ntype RecordedMove = { piece: Piece, move: Move, endPositionOldElement: BoardElement; };\n\nexport class Board {\n  private mode: GAME_MODE;\n  private boardTable: BoardElement[][];\n  private whiteTeam: Map<Piece, Position>;\n  private blackTeam: Map<Piece, Position>;\n  private recordedMoves: Array<RecordedMove>;\n  private availableMoves: Move[];\n  private activePiece: Piece | undefined;\n\n  constructor(mode: GAME_MODE) {\n    this.mode = mode;\n    this.boardTable = [];\n    this.whiteTeam = new Map<Piece, Position>();\n    this.blackTeam = new Map<Piece, Position>();\n    this.recordedMoves = [];\n    this.availableMoves = [];\n    this.createGame();\n  }\n\n  public isPositionWithinTheTable(position: Position): boolean {\n    const tableRows = this.boardTable.length;\n    const tableColumns = this.boardTable.length > 0 ? this.boardTable[0].length : 0;\n    const isRowValid = position.row < tableRows && position.row >= 0;\n    const isColumnValid = position.column < tableColumns && position.column >= 0;\n    return isRowValid && isColumnValid;\n  }\n\n  public isPositionEmpty(position: Position): boolean {\n    if (this.isPositionWithinTheTable(position)) {\n      return this.getBoardElement(position) == null;\n    }\n\n    return false;\n  }\n\n  public getElementName(position: Position): { team?: PIECE_TEAM, name: BOARD_ELEMENT_NAME; } | null {\n    if (!this.isPositionWithinTheTable(position)) {\n      return null;\n    }\n\n    if (this.isPositionEmpty(position)) {\n      return { name: BOARD_ELEMENT_NAME.EMPTY };\n    }\n\n    const boardElement = nullThrows(this.getBoardElement(position));\n\n    return {\n      team: boardElement.getTeam(),\n      name: boardElement.getName(),\n    };\n  }\n\n  private getBoardElement(position: Position): BoardElement {\n    if (!this.isPositionWithinTheTable(position)) {\n      return null;\n    }\n\n    return this.boardTable[position.row][position.column];\n  }\n\n  public hasTeamEnemy(team: PIECE_TEAM, position: Position): boolean {\n    const boardElement = this.getBoardElement(position);\n    if (boardElement != null) {\n      return boardElement.getTeam() !== team;\n    }\n\n    return false;\n  }\n\n  public hasTeamFriend(team: PIECE_TEAM, position: Position): boolean {\n    const boardElement = this.getBoardElement(position);\n    if (boardElement != null) {\n      return boardElement.getTeam() === team;\n    }\n\n    return false;\n  }\n\n  private createGame(): void {\n    if (this.mode === GAME_MODE.DEFAULT) {\n      this.createDefaultGame();\n    } else if (this.mode === GAME_MODE.CUSTOM) {\n\n    } else {\n      throw new Error('Game mode not implemented');\n    }\n  };\n\n  public static createCustomBoard(boardDimensions: { rows: number, columns: number; }): Board {\n    const board = new this(GAME_MODE.CUSTOM);\n    board.initBoardTable(boardDimensions);\n    return board;\n  }\n\n  private initBoardTable(boardDimensions: { rows: number, columns: number; }) {\n    for (let row = 0; row < boardDimensions.rows; row++) {\n      this.boardTable[row] = [];\n      for (let col = 0; col < boardDimensions.columns; col++) {\n        this.boardTable[row].push(null);\n      }\n    }\n  }\n\n  public addPiecesToCustomBoard(pieces: Array<Piece>) {\n    if (this.mode === GAME_MODE.CUSTOM) {\n      this.addPiecesToBoard(pieces);\n    }\n  }\n\n  private addPiecesToBoard(pieces: Array<Piece>) {\n    for (const piece of pieces) {\n      const initialPosition = piece.getInitialPosition();\n      this.boardTable[initialPosition.row][initialPosition.column] = piece;\n    }\n\n    this.assignTeams();\n  }\n\n  public isAvailableMove(position: Position): boolean {\n    return this.availableMoves.findIndex((move) => isEqual(move.getEndPosition(), position)) >= 0;\n  }\n\n  public executeBoardAction(position: Position): void {\n    if (this.isAvailableMove(position)) {\n      const piece = nullThrows(this.activePiece);\n      const team = this.getPieceTeam(piece);\n      this.makeMove(piece, new Move(nullThrows(team.get(piece)), position));\n      this.availableMoves = [];\n      return;\n    }\n\n    if (this.isPositionEmpty(position) || !this.isPositionWithinTheTable) {\n      this.availableMoves = [];\n      return;\n    }\n\n    this.setAvailableMoves(position);\n  }\n\n  private setAvailableMoves(position: Position) {\n\n    if (!this.isPositionWithinTheTable(position) || this.isPositionEmpty(position)) {\n      return null;\n    }\n\n    const piece = nullThrows(this.getBoardElement(position));\n\n    this.activePiece = piece;\n    this.availableMoves = this.filterMovesThatExposeTheKing(this.activePiece, piece.getAvailableMoves(position));\n  }\n\n  private filterMovesThatExposeTheKing(piece: Piece, moves: Array<Move>): Array<Move> {\n\n    const friendKing = nullThrows(Array.from(this.getPieceTeam(piece).keys()).find((piece) => piece.getName() === BOARD_ELEMENT_NAME.KING));\n    return moves.filter((move) => {\n      this.makeMove(piece, move);\n\n      const kingPosition = this.getPieceTeam(friendKing).get(friendKing) as Position;\n      const isKingInThreat = this.isPositionInThreat(friendKing.getTeam(), kingPosition);\n\n      this.revertLastMove();\n\n      return !isKingInThreat;\n    });\n  }\n\n  public isPositionInThreat(team: PIECE_TEAM, position: Position): boolean {\n    const oppositeTeam = this.getTeam(team, true);\n    const oppositeTeamPieces = Array.from(oppositeTeam.keys());\n\n    const pieceThreatening = oppositeTeamPieces.find((piece) => {\n      const piecePosition = oppositeTeam.get(piece) as Position;\n      const threatMove = piece.getAvailableMoves(piecePosition).find((move) => isEqual(move.getEndPosition(), position));\n      return threatMove != null;\n    });\n\n    return pieceThreatening != null;\n  }\n\n  private getPieceTeam(piece: Piece, opposite: boolean = false): Map<Piece, Position> {\n    return this.getTeam(piece.getTeam(), opposite);\n  }\n\n  private getTeam(team: PIECE_TEAM, opposite: boolean = false): Map<Piece, Position> {\n    if (opposite) {\n      return team === PIECE_TEAM.WHITE ? this.blackTeam : this.whiteTeam;\n    }\n    return team === PIECE_TEAM.WHITE ? this.whiteTeam : this.blackTeam;\n  }\n\n  private makeMove(piece: Piece, move: Move) {\n    if (this.isRockMove(piece, move)) {\n      return this.makeRockMove(piece as King, move);\n    }\n\n    const startPosition = move.getStartPosition();\n    const endPosition = move.getEndPosition();\n\n    const currentElementOnEnd = this.getBoardElement(endPosition);\n    this.boardTable[endPosition.row][endPosition.column] = piece;\n    this.boardTable[startPosition.row][startPosition.column] = null;\n\n    const pieceTeam = this.getPieceTeam(piece);\n    const oppositeTeam = this.getPieceTeam(piece, true);\n\n    pieceTeam.set(piece, endPosition);\n\n    if (currentElementOnEnd != null) {\n      oppositeTeam.delete(currentElementOnEnd);\n    }\n\n    this.recordedMoves.push({\n      piece,\n      move,\n      endPositionOldElement: currentElementOnEnd,\n    });\n  }\n\n  private isRockMove(piece: Piece, move: Move): boolean {\n    return piece.getName() === BOARD_ELEMENT_NAME.KING &&\n      Math.abs(move.getEndPosition().column - move.getStartPosition().column) > 1;\n  }\n\n  private makeRockMove(king: King, move: Move): void {\n    const team = this.getPieceTeam(king);\n\n    const kingStartPosition = move.getStartPosition();\n    const kingEndPosition = move.getEndPosition();\n\n    const towerStartPosition: Position = {\n      row: kingStartPosition.row,\n      column: kingEndPosition.column - kingStartPosition.column > 0 ?\n        kingEndPosition.column + 1 :\n        kingEndPosition.column - 2,\n    };\n\n    const towerEndPosition = {\n      ...towerStartPosition,\n      column: kingEndPosition.column - kingStartPosition.column > 0 ?\n        towerStartPosition.column - 2 :\n        towerStartPosition.column + 3,\n    };\n\n    const tower = nullThrows(this.getBoardElement(towerStartPosition));\n\n    this.boardTable[kingEndPosition.row][kingEndPosition.column] = king;\n    this.boardTable[kingStartPosition.row][kingStartPosition.column] = null;\n\n\n    this.boardTable[towerEndPosition.row][towerEndPosition.column] = tower;\n    this.boardTable[towerStartPosition.row][towerStartPosition.column] = null;\n\n    team.set(tower, towerEndPosition);\n    team.set(king, kingEndPosition);\n\n    this.recordedMoves.push({\n      piece: king,\n      move,\n      endPositionOldElement: tower,\n    });\n  }\n\n  public revertLastMove(): void {\n    if (this.recordedMoves.length === 0) {\n      return;\n    }\n    const lastMove = nullThrows(this.recordedMoves.pop());\n\n    if (this.isRockMove(lastMove.piece, lastMove.move)) {\n      return this.revertRockMove(lastMove);\n    }\n\n    const startPosition = lastMove.move.getStartPosition();\n    const endPosition = lastMove.move.getEndPosition();\n\n    const movedPiece = lastMove.piece;\n    const endPositionOldElement = lastMove.endPositionOldElement;\n\n    this.boardTable[startPosition.row][startPosition.column] = movedPiece;\n    this.boardTable[endPosition.row][endPosition.column] = endPositionOldElement;\n\n    const pieceTeam = this.getPieceTeam(movedPiece);\n    pieceTeam.set(movedPiece, startPosition);\n\n    if (endPositionOldElement != null) {\n      const oldElementTeam = this.getPieceTeam(endPositionOldElement);\n      oldElementTeam.set(endPositionOldElement, endPosition);\n    }\n  }\n\n  private revertRockMove(lastMove: RecordedMove): void {\n    const king = lastMove.piece;\n    const tower = lastMove.piece;\n    const move = lastMove.move;\n\n    const kingStartPosition = move.getStartPosition();\n    const kingEndPosition = move.getEndPosition();\n\n    const team = this.getPieceTeam(king);\n\n    this.boardTable[kingEndPosition.row][kingEndPosition.column] = null;\n    this.boardTable[kingStartPosition.row][kingStartPosition.column] = king;\n    team.set(king, kingStartPosition);\n\n    const towerStartPosition: Position = {\n      row: kingStartPosition.row,\n      column: kingEndPosition.column - kingStartPosition.column > 0 ?\n        kingEndPosition.column + 1 :\n        kingEndPosition.column - 2,\n    };\n\n    const towerEndPosition = {\n      ...towerStartPosition,\n      column: kingEndPosition.column - kingStartPosition.column > 0 ?\n        towerStartPosition.column - 2 :\n        towerStartPosition.column + 3,\n    };\n\n    this.boardTable[towerEndPosition.row][towerEndPosition.column] = null;\n    this.boardTable[towerStartPosition.row][towerStartPosition.column] = tower;\n    team.set(tower, towerStartPosition);\n  }\n\n  private assignTeams(): void {\n    const tableRows = this.boardTable.length;\n    const tableColumns = this.boardTable.length > 0 ? this.boardTable[0].length : 0;\n\n    for (let row = 0; row < tableRows; row++) {\n      for (let column = 0; column < tableColumns; column++) {\n        const boardElement = this.getBoardElement({ row, column });\n        if (boardElement != null) {\n          this.assignTeam(boardElement, { row, column });\n        }\n      }\n    }\n  }\n\n  private assignTeam(boardElement: Piece, position: Position): void {\n    if (boardElement.getTeam() === PIECE_TEAM.WHITE) {\n      this.whiteTeam.set(boardElement, position);\n    } else {\n      this.blackTeam.set(boardElement, position);\n    }\n  }\n\n  public getTable(): BoardElement[][] {\n    return this.boardTable;\n  }\n\n  private createDefaultGame(): void {\n    this.initBoardTable({ rows: 8, columns: 8 });\n\n    this.addPiecesToBoard([\n      new Tower(PIECE_TEAM.WHITE, this, { row: 0, column: 0 }),\n      new Knight(PIECE_TEAM.WHITE, this, { row: 0, column: 1 }),\n      new Bishop(PIECE_TEAM.WHITE, this, { row: 0, column: 2 }),\n      new Queen(PIECE_TEAM.WHITE, this, { row: 0, column: 3 }),\n      new King(PIECE_TEAM.WHITE, this, { row: 0, column: 4 }),\n      new Bishop(PIECE_TEAM.WHITE, this, { row: 0, column: 5 }),\n      new Knight(PIECE_TEAM.WHITE, this, { row: 0, column: 6 }),\n      new Tower(PIECE_TEAM.WHITE, this, { row: 0, column: 7 }),\n      new Pawn(PIECE_TEAM.WHITE, this, { row: 1, column: 0 }),\n      new Pawn(PIECE_TEAM.WHITE, this, { row: 1, column: 1 }),\n      new Pawn(PIECE_TEAM.WHITE, this, { row: 1, column: 2 }),\n      new Pawn(PIECE_TEAM.WHITE, this, { row: 1, column: 3 }),\n      new Pawn(PIECE_TEAM.WHITE, this, { row: 1, column: 4 }),\n      new Pawn(PIECE_TEAM.WHITE, this, { row: 1, column: 5 }),\n      new Pawn(PIECE_TEAM.WHITE, this, { row: 1, column: 6 }),\n      new Pawn(PIECE_TEAM.WHITE, this, { row: 1, column: 7 }),\n\n      new Pawn(PIECE_TEAM.BLACK, this, { row: 6, column: 0 }),\n      new Pawn(PIECE_TEAM.BLACK, this, { row: 6, column: 1 }),\n      new Pawn(PIECE_TEAM.BLACK, this, { row: 6, column: 2 }),\n      new Pawn(PIECE_TEAM.BLACK, this, { row: 6, column: 3 }),\n      new Pawn(PIECE_TEAM.BLACK, this, { row: 6, column: 4 }),\n      new Pawn(PIECE_TEAM.BLACK, this, { row: 6, column: 5 }),\n      new Pawn(PIECE_TEAM.BLACK, this, { row: 6, column: 6 }),\n      new Pawn(PIECE_TEAM.BLACK, this, { row: 6, column: 7 }),\n      new Tower(PIECE_TEAM.BLACK, this, { row: 7, column: 0 }),\n      new Knight(PIECE_TEAM.BLACK, this, { row: 7, column: 1 }),\n      new Bishop(PIECE_TEAM.BLACK, this, { row: 7, column: 2 }),\n      new Queen(PIECE_TEAM.BLACK, this, { row: 7, column: 3 }),\n      new King(PIECE_TEAM.BLACK, this, { row: 7, column: 4 }),\n      new Bishop(PIECE_TEAM.BLACK, this, { row: 7, column: 5 }),\n      new Knight(PIECE_TEAM.BLACK, this, { row: 7, column: 6 }),\n      new Tower(PIECE_TEAM.BLACK, this, { row: 7, column: 7 }),\n    ]);\n\n    this.assignTeams();\n  }\n}\n","export interface Position {\n    row: number;\n    column: number;\n}\n\nexport class Move {\n    private startPosition: Position;\n    private endPosition: Position;\n\n    constructor(startPosition: Position, endPosition: Position) {\n        this.startPosition = startPosition;\n        this.endPosition = endPosition;\n    }\n\n    public getStartPosition(): Position {\n        return this.startPosition;\n    }\n\n    public getEndPosition(): Position {\n        return this.endPosition;\n    }\n}\n","import { Piece } from './Piece';\nimport { Move, Position } from './Move';\n\nexport abstract class PieceWithRepeatedMove extends Piece {\n    protected getMovesWithStep(currentPosition: Position, stepOnRows: number, stepOnColumns: number): Array<Move> {\n        const availableMoves: Array<Move> = [];\n        const board = this.getBoard();\n\n        let candidatePosition: Position = {\n            ...currentPosition,\n            row: currentPosition.row + stepOnRows,\n            column: currentPosition.column + stepOnColumns,\n        };\n\n        while (board.isPositionWithinTheTable(candidatePosition)) {\n            const move = new Move(currentPosition, candidatePosition);\n            if (board.hasTeamFriend(this.getTeam(), candidatePosition)) {\n                break;\n            }\n\n            if (board.hasTeamEnemy(this.getTeam(), candidatePosition)) {\n                availableMoves.push(move);\n                break;\n            }\n\n            availableMoves.push(move);\n            candidatePosition = {\n                row: candidatePosition.row + stepOnRows,\n                column: candidatePosition.column + stepOnColumns,\n            };\n        }\n\n        return availableMoves;\n    }\n}\n","import { Move, Position } from './Move';\nimport { PieceWithRepeatedMove } from './PieceWithRepeatedMove';\nimport { BOARD_ELEMENT_NAME } from '../board/Board';\n\nexport class Tower extends PieceWithRepeatedMove {\n  public getName(): BOARD_ELEMENT_NAME {\n    return BOARD_ELEMENT_NAME.TOWER;\n  }\n\n  public getAvailableMoves(currentPosition: Position): Array<Move> {\n    const availableMoves: Array<Move> = [];\n    availableMoves.push(...this.getMovesWithStep(currentPosition, 1, 0));\n    availableMoves.push(...this.getMovesWithStep(currentPosition, -1, 0));\n    availableMoves.push(...this.getMovesWithStep(currentPosition, 0, 1));\n    availableMoves.push(...this.getMovesWithStep(currentPosition, 0, -1));\n    return availableMoves;\n  }\n}\n","import { Move, Position } from './Move';\nimport { Piece } from './Piece';\nimport { BOARD_ELEMENT_NAME } from '../board/Board';\n\nexport class Knight extends Piece {\n  public getName(): BOARD_ELEMENT_NAME {\n    return BOARD_ELEMENT_NAME.KNIGHT;\n  }\n  public getAvailableMoves(currentPosition: Position): Array<Move> {\n    const availableMoves: Array<Move> = [];\n\n    availableMoves.push(...this.getValidMove(currentPosition, {\n      ...currentPosition,\n      row: currentPosition.row + 2,\n      column: currentPosition.column + 1,\n    }));\n\n    availableMoves.push(...this.getValidMove(currentPosition, {\n      ...currentPosition,\n      row: currentPosition.row + 2,\n      column: currentPosition.column - 1,\n    }));\n\n    availableMoves.push(...this.getValidMove(currentPosition, {\n      ...currentPosition,\n      row: currentPosition.row - 2,\n      column: currentPosition.column + 1,\n    }));\n\n    availableMoves.push(...this.getValidMove(currentPosition, {\n      ...currentPosition,\n      row: currentPosition.row - 2,\n      column: currentPosition.column - 1,\n    }));\n\n    availableMoves.push(...this.getValidMove(currentPosition, {\n      ...currentPosition,\n      row: currentPosition.row + 1,\n      column: currentPosition.column + 2,\n    }));\n\n    availableMoves.push(...this.getValidMove(currentPosition, {\n      ...currentPosition,\n      row: currentPosition.row + 1,\n      column: currentPosition.column - 2,\n    }));\n\n    availableMoves.push(...this.getValidMove(currentPosition, {\n      ...currentPosition,\n      row: currentPosition.row - 1,\n      column: currentPosition.column + 2,\n    }));\n\n    availableMoves.push(...this.getValidMove(currentPosition, {\n      ...currentPosition,\n      row: currentPosition.row - 1,\n      column: currentPosition.column - 2,\n    }));\n\n    return availableMoves;\n  }\n\n  private getValidMove(currentPosition: Position, targetPosition: Position): Array<Move> {\n    const validMoves: Array<Move> = [];\n    const board = this.getBoard();\n\n    if (!board.isPositionWithinTheTable(targetPosition)) {\n      return validMoves;\n    }\n\n    if (board.hasTeamFriend(this.getTeam(), targetPosition)) {\n      return validMoves;\n    }\n\n    const move = new Move(currentPosition, targetPosition);\n    validMoves.push(move);\n    return validMoves;\n  }\n\n  public getSpecialMoves(): Array<Move> {\n    throw new Error('Method not implemented.');\n  }\n}\n","import { Move, Position } from './Move';\nimport { PieceWithRepeatedMove } from './PieceWithRepeatedMove';\nimport { BOARD_ELEMENT_NAME } from '../board/Board';\n\nexport class Bishop extends PieceWithRepeatedMove {\n  public getName(): BOARD_ELEMENT_NAME {\n    return BOARD_ELEMENT_NAME.BISHOP;\n  }\n  public getAvailableMoves(currentPosition: Position): Array<Move> {\n    const availableMoves: Array<Move> = [];\n    availableMoves.push(...this.getMovesWithStep(currentPosition, 1, 1));\n    availableMoves.push(...this.getMovesWithStep(currentPosition, 1, -1));\n    availableMoves.push(...this.getMovesWithStep(currentPosition, -1, 1));\n    availableMoves.push(...this.getMovesWithStep(currentPosition, -1, -1));\n    return availableMoves;\n  }\n\n  public getSpecialMoves(): Array<Move> {\n    throw new Error('Method not implemented.');\n  }\n}\n","import { Move, Position } from './Move';\nimport { Piece } from './Piece';\nimport { BOARD_ELEMENT_NAME } from '../board/Board';\n\nexport class King extends Piece {\n  public getName(): BOARD_ELEMENT_NAME {\n    return BOARD_ELEMENT_NAME.KING;\n  }\n  public getAvailableMoves(currentPosition: Position): Array<Move> {\n    const availableMoves: Array<Move> = [];\n    availableMoves.push(...this.getMovesWithStep(currentPosition, 1, 1));\n    availableMoves.push(...this.getMovesWithStep(currentPosition, 1, -1));\n    availableMoves.push(...this.getMovesWithStep(currentPosition, -1, 1));\n    availableMoves.push(...this.getMovesWithStep(currentPosition, -1, -1));\n\n    availableMoves.push(...this.getMovesWithStep(currentPosition, 1, 0));\n    availableMoves.push(...this.getMovesWithStep(currentPosition, -1, 0));\n    availableMoves.push(...this.getMovesWithStep(currentPosition, 0, 1));\n    availableMoves.push(...this.getMovesWithStep(currentPosition, 0, -1));\n\n    return availableMoves;\n  }\n\n  private getMovesWithStep(currentPosition: Position, stepOnRows: number, stepOnColumns: number): Array<Move> {\n    const availableMoves: Array<Move> = [];\n    const board = this.getBoard();\n\n    let candidatePosition: Position = {\n      ...currentPosition,\n      row: currentPosition.row + stepOnRows,\n      column: currentPosition.column + stepOnColumns,\n    };\n\n    if (board.isPositionWithinTheTable(candidatePosition)) {\n      if (board.hasTeamEnemy(this.getTeam(), candidatePosition) || board.isPositionEmpty(candidatePosition)) {\n        const move = new Move(currentPosition, candidatePosition);\n        availableMoves.push(move);\n      }\n    }\n\n    return availableMoves;\n  }\n  public getSpecialMoves(): Array<Move> {\n    throw new Error('Method not implemented.');\n  }\n\n}\n","import { Move, Position } from './Move';\nimport { PieceWithRepeatedMove } from './PieceWithRepeatedMove';\nimport { BOARD_ELEMENT_NAME } from '../board/Board';\n\nexport class Queen extends PieceWithRepeatedMove {\n  public getName(): BOARD_ELEMENT_NAME {\n    return BOARD_ELEMENT_NAME.QUEEN;\n  }\n  public getAvailableMoves(currentPosition: Position): Array<Move> {\n    const availableMoves: Array<Move> = [];\n    availableMoves.push(...this.getMovesWithStep(currentPosition, 1, 1));\n    availableMoves.push(...this.getMovesWithStep(currentPosition, 1, -1));\n    availableMoves.push(...this.getMovesWithStep(currentPosition, -1, 1));\n    availableMoves.push(...this.getMovesWithStep(currentPosition, -1, -1));\n\n    availableMoves.push(...this.getMovesWithStep(currentPosition, 1, 0));\n    availableMoves.push(...this.getMovesWithStep(currentPosition, -1, 0));\n    availableMoves.push(...this.getMovesWithStep(currentPosition, 0, 1));\n    availableMoves.push(...this.getMovesWithStep(currentPosition, 0, -1));\n    return availableMoves;\n  }\n}\n","import { Move, Position } from './Move';\nimport { Piece, PIECE_TEAM } from './Piece';\nimport { BOARD_ELEMENT_NAME } from '../board/Board';\nimport { isEqual } from 'lodash';\n\nexport class Pawn extends Piece {\n  public getName(): BOARD_ELEMENT_NAME {\n    return BOARD_ELEMENT_NAME.PAWN;\n  }\n\n  public getAvailableMoves(currentPosition: Position): Array<Move> {\n    const availableMoves: Array<Move> = [];\n    const board = this.getBoard();\n\n    const pawnStep = this.getTeam() === PIECE_TEAM.WHITE ? 1 : -1;\n\n    if (board.isPositionEmpty({\n      ...currentPosition,\n      row: currentPosition.row + pawnStep\n    })) {\n      const move = new Move(currentPosition, { row: currentPosition.row + pawnStep, column: currentPosition.column });\n      availableMoves.push(move);\n\n      if (isEqual(this.getInitialPosition(), currentPosition) && board.isPositionEmpty({\n        ...currentPosition,\n        row: currentPosition.row + pawnStep * 2\n      })) {\n        const move = new Move(currentPosition, { row: currentPosition.row + pawnStep * 2, column: currentPosition.column });\n        availableMoves.push(move);\n      }\n    }\n\n    if (board.hasTeamEnemy(this.getTeam(), { row: currentPosition.row + pawnStep, column: currentPosition.column + 1 })) {\n      const move = new Move(currentPosition, { row: currentPosition.row + pawnStep, column: currentPosition.column + 1 });\n      availableMoves.push(move);\n    }\n\n    if (board.hasTeamEnemy(this.getTeam(), { row: currentPosition.row + pawnStep, column: currentPosition.column - 1 })) {\n      const move = new Move(currentPosition, { row: currentPosition.row + pawnStep, column: currentPosition.column - 1 });\n      availableMoves.push(move);\n    }\n\n    return availableMoves;\n  }\n}\n","export function nullThrows<T>(obj: T | null | undefined): T {\n  if (obj == null) {\n    throw Error('Object is null');\n  }\n\n  return obj;\n}\n","import * as React from 'react';\nimport { useEffect, useState } from 'react';\nimport { createStyles } from '../shared/utils';\nimport { css } from 'emotion';\nimport {\n  ChessIconUnicode,\n  ChessIconUnicodeKeys,\n} from '../constants/ChessIconUnicode';\nimport { BoardSquare, BoardSquareProps } from './BoardSquare';\nimport {\n  Board,\n  GAME_MODE,\n  BOARD_ELEMENT_NAME,\n} from '../chess-rules/board/Board';\nimport { PIECE_TEAM } from '../chess-rules/pieces/Piece';\nimport { nullThrows } from '../shared/nullThrows';\n\ntype Props = Readonly<{\n  dimensions?: { rows: number; columns: number };\n}>;\n\nfunction getIcon(name: BOARD_ELEMENT_NAME, team: PIECE_TEAM): ChessIconUnicode {\n  for (const enumMember in ChessIconUnicode) {\n    if (enumMember === `${team}_${name}`) {\n      return ChessIconUnicode[enumMember as ChessIconUnicodeKeys];\n    }\n  }\n  throw Error(`Invalid name or team, received name=${name} and team=${team}`);\n}\n\nexport function GameBoard({ dimensions = { rows: 8, columns: 8 } }: Props) {\n  const [hasChanges, setHasChanges] = useState(false);\n  const [boardRules, setBoardRules] = useState(new Board(GAME_MODE.DEFAULT));\n\n  useEffect(() => {\n    if (hasChanges) {\n      setHasChanges(false);\n    }\n  }, [hasChanges]);\n\n  function renderBoard() {\n    const board = [];\n    for (let row = dimensions.rows - 1; row >= 0; row--) {\n      const squaresTypes: BoardSquareProps['color'][] = ['black', 'white'];\n      const Squares = [];\n\n      for (let column = 0; column < dimensions.columns; column++) {\n        const color = squaresTypes[(column + row) % 2];\n        const elementName = boardRules.getElementName({ row, column });\n        let icon;\n        if (elementName == null) {\n          icon = null;\n        } else if (boardRules.isAvailableMove({ row, column })) {\n          icon = ChessIconUnicode.BULLET;\n        } else if (elementName.name === BOARD_ELEMENT_NAME.EMPTY) {\n          icon = null;\n        } else {\n          icon = getIcon(elementName.name, nullThrows(elementName.team));\n        }\n\n        Squares.push(\n          <BoardSquare\n            key={`row${row}-column${column}`}\n            color={color}\n            icon={icon}\n            onClick={() => {\n              boardRules.executeBoardAction({ row, column });\n              setHasChanges(true);\n            }}\n          />\n        );\n      }\n\n      board.push(\n        <div key={`row${row}`} className={css(styles.rowRootContainer)}>\n          {Squares}\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        <div className={css(styles.boardRootContainer)}>{board}</div>\n        <button\n          onClick={() => {\n            setBoardRules(new Board(GAME_MODE.DEFAULT));\n          }}\n        >\n          Reset Game\n        </button>\n\n        <button\n          onClick={() => {\n            boardRules.revertLastMove();\n            setHasChanges(true);\n          }}\n        >\n          Revert last move\n        </button>\n      </div>\n    );\n  }\n\n  return renderBoard();\n}\n\nconst styles = createStyles({\n  boardRootContainer: {\n    border: '4px solid brown',\n    display: 'inline-block',\n    margin: '4px',\n  },\n  rowRootContainer: {\n    display: 'flex',\n  },\n});\n","import * as React from 'react';\nimport { GameBoard } from './components/GameBoard';\n\ntype Props = Readonly<{}>;\n\nexport function Home(props: Props) {\n  return <GameBoard />;\n}\n","import React from 'react';\nimport { Home } from './Home';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <header className='Chess Game'>\n        <Home />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}